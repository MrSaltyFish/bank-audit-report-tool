{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/connectDB.ts"],"sourcesContent":["import \"dotenv/config\";\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport postgres from \"postgres\";\nimport { Pool } from \"pg\";\n\nconst connectionString = process.env.DATABASE_URL;\n\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\n\nconst pool = new Pool({\n  connectionString,\n});\n\nexport const client = postgres(connectionString, { prepare: false });\nexport const db = drizzle({ client: pool });\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;;;;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AAEjD,IAAI,CAAC,kBAAkB;IACrB,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB;AACF;AAEO,MAAM,SAAS,CAAA,GAAA,0IAAA,CAAA,UAAQ,AAAD,EAAE,kBAAkB;IAAE,SAAS;AAAM;AAC3D,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE;IAAE,QAAQ;AAAK","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/libs/validators/auth.validators.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const loginSchema = z.object({\n    email: z.email({ message: \"Invalid e-mail address\" }),\n    password: z\n        .string()\n        .min(8, { message: \"Password must be 8+ characters.\" })\n        .max(72), // bcrypt\n});\n\nexport const registerSchema = z.object({\n    username: z\n        .string()\n        .min(6, { error: \"Minimum 6 characters.\" })\n        .max(16, { error: \"Must be lower than 16 characters.\" }),\n    email: z.email({ message: \"Invalid e-mail address\" }),\n    password: z\n        .string()\n        .min(8, { error: \"Password must be longer than 8 characters.\" })\n        .max(72), // bcrypt\n});\n\nexport const resetSchema = z.object({\n    email: z.email({ error: \"Enter proper email.\" }),\n});\n\nexport type LoginInput = z.infer<typeof loginSchema>;\nexport type CreateUserInput = z.infer<typeof registerSchema>;\nexport type ResetInput = z.infer<typeof resetSchema>;\n"],"names":[],"mappings":";;;;;AAAA;;AAEO,MAAM,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC;QAAE,SAAS;IAAyB;IACnD,UAAU,+KAAA,CAAA,IAAC,CACN,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAkC,GACpD,GAAG,CAAC;AACb;AAEO,MAAM,iBAAiB,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,UAAU,+KAAA,CAAA,IAAC,CACN,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,OAAO;IAAwB,GACxC,GAAG,CAAC,IAAI;QAAE,OAAO;IAAoC;IAC1D,OAAO,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC;QAAE,SAAS;IAAyB;IACnD,UAAU,+KAAA,CAAA,IAAC,CACN,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,OAAO;IAA6C,GAC7D,GAAG,CAAC;AACb;AAEO,MAAM,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC;QAAE,OAAO;IAAsB;AAClD","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/users.ts"],"sourcesContent":["import {\n    pgTable,\n    text,\n    timestamp,\n    boolean,\n    uuid,\n    integer,\n    pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { InferSelectModel, InferInsertModel } from \"drizzle-orm\";\n\n// ------------------ Enums ------------------\nexport const userStatusEnum = pgEnum(\"user_status\", [\n    \"active\",\n    \"banned\",\n    \"suspended\",\n    \"deleted\",\n]);\n\n// ------------------ Users Table ------------------\nexport const users = pgTable(\"users\", {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n\n    username: text(\"username\").notNull().unique(),\n    email: text(\"email\").notNull().unique(),\n    passwordHash: text(\"password_hash\").notNull(),\n\n    createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n    updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n\n    // Email verification\n    emailVerified: timestamp(\"email_verified_at\", { withTimezone: true }),\n    isEmailVerified: boolean(\"is_email_verified\").notNull().default(false),\n\n    // Password reset\n    resetPasswordToken: text(\"reset_password_token\"), // nullable instead of \"\"\n    resetPasswordTokenExpires: timestamp(\"reset_password_token_expires\", {\n        withTimezone: true,\n    }),\n\n    // Account verification\n    verificationToken: text(\"verification_token\"),\n    verificationTokenExpires: timestamp(\"verification_token_expires\", {\n        withTimezone: true,\n    }),\n\n    // Security & audit\n    lastLoginAt: timestamp(\"last_login_at\", { withTimezone: true }),\n    failedLoginAttempts: integer(\"failed_login_attempts\").notNull().default(0),\n    passwordChangedAt: timestamp(\"password_changed_at\", { withTimezone: true }),\n\n    status: userStatusEnum(\"status\").notNull().default(\"active\"),\n});\n\nexport type User_Select = InferSelectModel<typeof users>;\nexport type User_Insert = InferInsertModel<typeof users>;\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYO,MAAM,iBAAiB,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,eAAe;IAChD;IACA;IACA;IACA;CACH;AAGM,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IAClC,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IAEzC,UAAU,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,YAAY,OAAO,GAAG,MAAM;IAC3C,OAAO,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,SAAS,OAAO,GAAG,MAAM;IACrC,cAAc,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,iBAAiB,OAAO;IAE3C,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GAAG,UAAU;IACrE,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GAAG,UAAU;IAErE,qBAAqB;IACrB,eAAe,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,qBAAqB;QAAE,cAAc;IAAK;IACnE,iBAAiB,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,qBAAqB,OAAO,GAAG,OAAO,CAAC;IAEhE,iBAAiB;IACjB,oBAAoB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACzB,2BAA2B,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,gCAAgC;QACjE,cAAc;IAClB;IAEA,uBAAuB;IACvB,mBAAmB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACxB,0BAA0B,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,8BAA8B;QAC9D,cAAc;IAClB;IAEA,mBAAmB;IACnB,aAAa,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,iBAAiB;QAAE,cAAc;IAAK;IAC7D,qBAAqB,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,yBAAyB,OAAO,GAAG,OAAO,CAAC;IACxE,mBAAmB,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,uBAAuB;QAAE,cAAc;IAAK;IAEzE,QAAQ,eAAe,UAAU,OAAO,GAAG,OAAO,CAAC;AACvD","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/roles.ts"],"sourcesContent":["import { pgTable, text, uuid } from \"drizzle-orm/pg-core\";\nimport { users } from \"@db/schema/users\";\n\n// ------------------ Roles Table (join for many-to-many) ------------------\nexport const roles = pgTable(\"roles\", {\n\tid: uuid(\"id\").primaryKey().defaultRandom(),\n\tname: text(\"name\").notNull().unique(), // e.g. \"admin\", \"editor\", \"user\"\n});\n\nexport const userRoles = pgTable(\"user_roles\", {\n\tid: uuid(\"id\").primaryKey().defaultRandom(),\n\tuserId: uuid(\"user_id\")\n\t\t.notNull()\n\t\t.references(() => users.id, { onDelete: \"cascade\" }),\n\troleId: uuid(\"role_id\")\n\t\t.notNull()\n\t\t.references(() => roles.id, { onDelete: \"cascade\" }),\n});\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AACA;;;AAGO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IACrC,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IACzC,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO,GAAG,MAAM;AACpC;AAEO,MAAM,YAAY,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,cAAc;IAC9C,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,WACX,OAAO,GACP,UAAU,CAAC,IAAM,8HAAA,CAAA,QAAK,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IACnD,QAAQ,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,WACX,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;AACpD","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { randomBytes } from \"crypto\";\nimport bcrypt from \"bcryptjs\";\n\nimport jwt from \"jsonwebtoken\";\nconst JWT_SECRET = process.env.JWT_SECRET;\n\nimport { db } from \"@db/connectDB\";\nimport { eq } from \"drizzle-orm\";\nimport { registerSchema } from \"@libs/validators/auth.validators\";\nimport { users } from \"@db/schema/users\";\nimport { userRoles } from \"@db/schema/roles\";\nimport { roles } from \"@db/schema/roles\";\n\nexport async function POST(request: NextRequest) {\n    const body = await request.json();\n    const parsed = registerSchema.safeParse(body);\n\n    if (!parsed.success) {\n        return NextResponse.json({ error: parsed.error }, { status: 400 });\n    }\n\n    const { email, password, username } = parsed.data;\n\n    const existingUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, email))\n        .limit(1)\n        .then((res) => res[0]);\n\n    if (existingUser) {\n        return NextResponse.json(\n            { error: \"Account already exists. Use login instead.\" },\n            { status: 409 },\n        );\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const verificationToken = randomBytes(32).toString(\"hex\");\n    const verificationTokenExpires = new Date(Date.now() + 1000 * 60 * 60 * 24); // 24 hours\n\n    const result = await db\n        .insert(users)\n        .values({\n            email: email,\n            username: username,\n            passwordHash: hashedPassword,\n            verificationToken,\n            verificationTokenExpires,\n        })\n        .returning({ id: users.id, email: users.email, username: users.username });\n\n    const user = result[0];\n    const userRole = await db.insert(userRoles).values({\n        userId: user.id,\n        roleId: (await db.select().from(roles).where(eq(roles.name, \"user\")))[0].id,\n    });\n\n    const role = await db\n        .select({ name: roles.name })\n        .from(userRoles)\n        .leftJoin(roles, eq(userRoles.roleId, roles.id))\n        .where(eq(userRoles.userId, user.id));\n\n    if (!JWT_SECRET) {\n        throw new Error(\"JWT_SECRET not defined in env.\");\n    }\n\n    const oneWeek = 60 * 60 * 24 * 7;\n\n    const token = jwt.sign(\n        { sub: user.id, email: user.email, roles: role.map((r) => r.name) },\n        JWT_SECRET,\n        { expiresIn: oneWeek },\n    );\n\n    const response = NextResponse.json(\n        { message: \"Register successful\" },\n        { status: 201 },\n    );\n\n    response.cookies.set({\n        name: \"auth-token\",\n        value: token,\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        path: \"/\",\n        maxAge: oneWeek,\n    });\n\n    return response;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}