{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/app/user/%5Buser%5D/page.tsx"],"sourcesContent":["import { cookies } from \"next/headers\";\nimport jwt from \"jsonwebtoken\";\nimport { notFound } from \"next/navigation\";\n\ntype User = {\n    id: string;\n};\n\nexport default async function UserPage() {\n    // Get cookies\n    const cookieStore = await cookies();\n    const token = cookieStore.get(\"auth-token\")?.value;\n\n    if (!token) {\n        return notFound(); // no token, redirect or show 404\n    }\n\n    try {\n        // Ensure JWT_SECRET exists\n        const JWT_SECRET = process.env.JWT_SECRET;\n        if (!JWT_SECRET) {\n            throw new Error(\"No JWT SECRET provided.\");\n        }\n\n        const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\n        const userUUID = decoded.userId;\n\n        // Fetch user from backend\n        const res = await fetch(\n            `${process.env.NEXT_PUBLIC_SERVER_URL}/user/${userUUID}`,\n            {\n                method: \"GET\",\n                credentials: \"include\",\n                headers: { \"Content-Type\": \"application/json\" },\n                cache: \"no-store\",\n            },\n        );\n\n        if (!res.ok) return notFound();\n\n        const users: User = await res.json();\n\n        return (\n            <div>\n                <h1>All Users</h1>\n                {users.map((user) => (\n                    <div\n                        key={user.id}\n                        style={{ border: \"1px solid #ccc\", margin: \"8px\", padding: \"8px\" }}\n                    >\n                        <p>\n                            <strong>ID:</strong> {user.id}\n                        </p>\n                        <p>\n                            <strong>Username:</strong> {user.username}\n                        </p>\n                        <p>\n                            <strong>Email:</strong> {user.email}\n                        </p>\n                        <p>\n                            <strong>Role:</strong> {user.role}\n                        </p>\n                        <p>\n                            <strong>Banned:</strong> {user.isBanned ? \"Yes\" : \"No\"}\n                        </p>\n                        <p>\n                            <strong>Created At:</strong> {user.createdAt.toString()}\n                        </p>\n                        <p>\n                            <strong>Updated At:</strong> {user.updatedAt.toString()}\n                        </p>\n                        <p>\n                            <strong>Email Verified:</strong>{\" \"}\n                            {user.emailVerified\n                                ? user.emailVerified.toString()\n                                : \"Not verified\"}\n                        </p>\n                        <p>\n                            <strong>Reset Token:</strong> {user.resetPasswordToken || \"None\"}\n                        </p>\n                        <p>\n                            <strong>Reset Token Expires:</strong>{\" \"}\n                            {user.resetPasswordTokenExpires.toString()}\n                        </p>\n                        <p>\n                            <strong>Verification Token:</strong>{\" \"}\n                            {user.verificationToken || \"None\"}\n                        </p>\n                        <p>\n                            <strong>Verification Token Expires:</strong>{\" \"}\n                            {user.verificationTokenExpires.toString()}\n                        </p>\n                    </div>\n                ))}\n            </div>\n        );\n    } catch (err) {\n        console.error(\"Invalid token\", err);\n        return notFound();\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;;AAMe,eAAe;IAC1B,cAAc;IACd,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,QAAQ,YAAY,GAAG,CAAC,eAAe;IAE7C,IAAI,CAAC,OAAO;QACR,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,KAAK,iCAAiC;IACxD;IAEA,IAAI;QACA,2BAA2B;QAC3B,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;QACzC,IAAI,CAAC,YAAY;YACb,MAAM,IAAI,MAAM;QACpB;QAEA,MAAM,UAAU,qIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAClC,MAAM,WAAW,QAAQ,MAAM;QAE/B,0BAA0B;QAC1B,MAAM,MAAM,MAAM,MACd,6DAAsC,MAAM,EAAE,UAAU,EACxD;YACI,QAAQ;YACR,aAAa;YACb,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,OAAO;QACX;QAGJ,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;QAE3B,MAAM,QAAc,MAAM,IAAI,IAAI;QAElC,qBACI,8OAAC;;8BACG,8OAAC;8BAAG;;;;;;gBACH,MAAM,GAAG,CAAC,CAAC,qBACR,8OAAC;wBAEG,OAAO;4BAAE,QAAQ;4BAAkB,QAAQ;4BAAO,SAAS;wBAAM;;0CAEjE,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAY;oCAAE,KAAK,EAAE;;;;;;;0CAEjC,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAkB;oCAAE,KAAK,QAAQ;;;;;;;0CAE7C,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAe;oCAAE,KAAK,KAAK;;;;;;;0CAEvC,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAc;oCAAE,KAAK,IAAI;;;;;;;0CAErC,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAgB;oCAAE,KAAK,QAAQ,GAAG,QAAQ;;;;;;;0CAEtD,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAoB;oCAAE,KAAK,SAAS,CAAC,QAAQ;;;;;;;0CAEzD,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAoB;oCAAE,KAAK,SAAS,CAAC,QAAQ;;;;;;;0CAEzD,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAyB;oCAChC,KAAK,aAAa,GACb,KAAK,aAAa,CAAC,QAAQ,KAC3B;;;;;;;0CAEV,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAqB;oCAAE,KAAK,kBAAkB,IAAI;;;;;;;0CAE9D,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAA8B;oCACrC,KAAK,yBAAyB,CAAC,QAAQ;;;;;;;0CAE5C,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAA6B;oCACpC,KAAK,iBAAiB,IAAI;;;;;;;0CAE/B,8OAAC;;kDACG,8OAAC;kDAAO;;;;;;oCAAqC;oCAC5C,KAAK,wBAAwB,CAAC,QAAQ;;;;;;;;uBA3CtC,KAAK,EAAE;;;;;;;;;;;IAiDhC,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IAClB;AACJ","debugId":null}}]
}