{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/connectDB.ts"],"sourcesContent":["import \"dotenv/config\";\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport postgres from \"postgres\";\nimport { Pool } from \"pg\";\n\nconst connectionString = process.env.DATABASE_URL;\n\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\n\nconst pool = new Pool({\n  connectionString,\n});\n\nexport const client = postgres(connectionString, { prepare: false });\nexport const db = drizzle({ client: pool });\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;;;;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AAEjD,IAAI,CAAC,kBAAkB;IACrB,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB;AACF;AAEO,MAAM,SAAS,CAAA,GAAA,0IAAA,CAAA,UAAQ,AAAD,EAAE,kBAAkB;IAAE,SAAS;AAAM;AAC3D,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE;IAAE,QAAQ;AAAK","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/libs/validators/auth.validators.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const loginSchema = z.object({\n    email: z.email({ message: \"Invalid e-mail address\" }),\n    password: z\n        .string()\n        .min(8, { message: \"Password must be 8+ characters.\" })\n        .max(72), // bcrypt\n});\n\nexport const registerSchema = z.object({\n    username: z\n        .string()\n        .min(6, { error: \"Minimum 6 characters.\" })\n        .max(16, { error: \"Must be lower than 16 characters.\" }),\n    email: z.email({ message: \"Invalid e-mail address\" }),\n    password: z\n        .string()\n        .min(8, { error: \"Password must be longer than 8 characters.\" })\n        .max(72), // bcrypt\n});\n\nexport const resetSchema = z.object({\n    email: z.email({ error: \"Enter proper email.\" }),\n});\n\nexport type LoginInput = z.infer<typeof loginSchema>;\nexport type CreateUserInput = z.infer<typeof registerSchema>;\nexport type ResetInput = z.infer<typeof resetSchema>;\n"],"names":[],"mappings":";;;;;AAAA;;AAEO,MAAM,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC;QAAE,SAAS;IAAyB;IACnD,UAAU,+KAAA,CAAA,IAAC,CACN,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAkC,GACpD,GAAG,CAAC;AACb;AAEO,MAAM,iBAAiB,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,UAAU,+KAAA,CAAA,IAAC,CACN,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,OAAO;IAAwB,GACxC,GAAG,CAAC,IAAI;QAAE,OAAO;IAAoC;IAC1D,OAAO,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC;QAAE,SAAS;IAAyB;IACnD,UAAU,+KAAA,CAAA,IAAC,CACN,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,OAAO;IAA6C,GAC7D,GAAG,CAAC;AACb;AAEO,MAAM,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC;QAAE,OAAO;IAAsB;AAClD","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/users.ts"],"sourcesContent":["import {\n    pgTable,\n    text,\n    timestamp,\n    boolean,\n    uuid,\n    integer,\n    pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { InferSelectModel, InferInsertModel } from \"drizzle-orm\";\n\n// ------------------ Enums ------------------\nexport const userStatusEnum = pgEnum(\"user_status\", [\n    \"active\",\n    \"banned\",\n    \"suspended\",\n    \"deleted\",\n]);\n\n// ------------------ Users Table ------------------\nexport const users = pgTable(\"users\", {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n\n    username: text(\"username\").notNull().unique(),\n    email: text(\"email\").notNull().unique(),\n    passwordHash: text(\"password_hash\").notNull(),\n\n    createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n    updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n\n    // Email verification\n    emailVerified: timestamp(\"email_verified_at\", { withTimezone: true }),\n    isEmailVerified: boolean(\"is_email_verified\").notNull().default(false),\n\n    // Password reset\n    resetPasswordToken: text(\"reset_password_token\"), // nullable instead of \"\"\n    resetPasswordTokenExpires: timestamp(\"reset_password_token_expires\", {\n        withTimezone: true,\n    }),\n\n    // Account verification\n    verificationToken: text(\"verification_token\"),\n    verificationTokenExpires: timestamp(\"verification_token_expires\", {\n        withTimezone: true,\n    }),\n\n    // Security & audit\n    lastLoginAt: timestamp(\"last_login_at\", { withTimezone: true }),\n    failedLoginAttempts: integer(\"failed_login_attempts\").notNull().default(0),\n    passwordChangedAt: timestamp(\"password_changed_at\", { withTimezone: true }),\n\n    status: userStatusEnum(\"status\").notNull().default(\"active\"),\n});\n\nexport type User_Select = InferSelectModel<typeof users>;\nexport type User_Insert = InferInsertModel<typeof users>;\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYO,MAAM,iBAAiB,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,eAAe;IAChD;IACA;IACA;IACA;CACH;AAGM,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IAClC,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IAEzC,UAAU,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,YAAY,OAAO,GAAG,MAAM;IAC3C,OAAO,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,SAAS,OAAO,GAAG,MAAM;IACrC,cAAc,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,iBAAiB,OAAO;IAE3C,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GAAG,UAAU;IACrE,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GAAG,UAAU;IAErE,qBAAqB;IACrB,eAAe,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,qBAAqB;QAAE,cAAc;IAAK;IACnE,iBAAiB,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,qBAAqB,OAAO,GAAG,OAAO,CAAC;IAEhE,iBAAiB;IACjB,oBAAoB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACzB,2BAA2B,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,gCAAgC;QACjE,cAAc;IAClB;IAEA,uBAAuB;IACvB,mBAAmB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACxB,0BAA0B,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,8BAA8B;QAC9D,cAAc;IAClB;IAEA,mBAAmB;IACnB,aAAa,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,iBAAiB;QAAE,cAAc;IAAK;IAC7D,qBAAqB,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,yBAAyB,OAAO,GAAG,OAAO,CAAC;IACxE,mBAAmB,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,uBAAuB;QAAE,cAAc;IAAK;IAEzE,QAAQ,eAAe,UAAU,OAAO,GAAG,OAAO,CAAC;AACvD","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/roles.ts"],"sourcesContent":["import { pgTable, text, uuid } from \"drizzle-orm/pg-core\";\nimport { users } from \"@db/schema/users\";\n\n// ------------------ Roles Table (join for many-to-many) ------------------\nexport const roles = pgTable(\"roles\", {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    name: text(\"name\").notNull().unique(), // e.g. \"admin\", \"editor\", \"user\"\n});\n\nexport const userRoles = pgTable(\"user_roles\", {\n    userId: uuid(\"user_id\")\n        .notNull()\n        .references(() => users.id, { onDelete: \"cascade\" }),\n    roleId: uuid(\"role_id\")\n        .notNull()\n        .references(() => roles.id, { onDelete: \"cascade\" }),\n});\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AACA;;;AAGO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IAClC,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IACzC,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO,GAAG,MAAM;AACvC;AAEO,MAAM,YAAY,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,cAAc;IAC3C,QAAQ,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,WACR,OAAO,GACP,UAAU,CAAC,IAAM,8HAAA,CAAA,QAAK,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IACtD,QAAQ,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,WACR,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;AAC1D","debugId":null}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\n\nimport { db } from \"@db/connectDB\";\nimport { eq } from \"drizzle-orm\";\nimport { loginSchema } from \"@libs/validators/auth.validators\";\nimport { users } from \"@db/schema/users\";\nimport { userRoles } from \"@/db/schema/roles\";\n\nif (!process.env.JWT_SECRET) {\n\tthrow new Error(\"JWT_SECRET is not set in environment variables\");\n}\nconst JWT_SECRET = process.env.JWT_SECRET;\n\nexport async function POST(request: NextRequest) {\n\ttry {\n\t\tconst body = await request.json();\n\t\tconst parsed = loginSchema.safeParse(body);\n\n\t\tif (!parsed.success) {\n\t\t\tconsole.log(parsed.error);\n\t\t\treturn NextResponse.json(\n\t\t\t\t{ error: parsed.error.flatten() },\n\t\t\t\t{ status: 400 },\n\t\t\t);\n\t\t}\n\n\t\tconst { email, password } = parsed.data;\n\t\tconst user = await db\n\t\t\t.select()\n\t\t\t.from(users)\n\t\t\t.where(eq(users.email, email))\n\t\t\t.limit(1)\n\t\t\t.then((res) => res[0]);\n\n\t\tif (!user) {\n\t\t\treturn NextResponse.json(\n\t\t\t\t{ error: \"User not found. New here? Use Register.\", success: false },\n\t\t\t\t{ status: 401 },\n\t\t\t);\n\t\t}\n\n\t\tconst isPasswordValid = await bcrypt.compare(password, user.passwordHash);\n\n\t\tif (!isPasswordValid) {\n\t\t\treturn NextResponse.json(\n\t\t\t\t{ error: \"Invalid email or password.\" },\n\t\t\t\t{ status: 401 },\n\t\t\t);\n\t\t}\n\n\t\tconst oneWeek = 60 * 60 * 24 * 7;\n\n\t\tconst token = jwt.sign(\n\t\t\t{\n\t\t\t\tsub: user.id.valueOf(),\n\t\t\t\trole: userRoles,\n\t\t\t\temail: user.email.valueOf(),\n\t\t\t},\n\t\t\tJWT_SECRET,\n\t\t\t{\n\t\t\t\texpiresIn: oneWeek,\n\t\t\t},\n\t\t);\n\n\t\tconst response = NextResponse.json(\n\t\t\t{ message: \"Login successful\", success: true },\n\t\t\t{ status: 200 },\n\t\t);\n\t\tresponse.cookies.set({\n\t\t\tname: \"auth-token\",\n\t\t\tvalue: token,\n\t\t\thttpOnly: true,\n\t\t\tsecure: process.env.NODE_ENV === \"production\",\n\t\t\tsameSite: \"strict\",\n\t\t\tpath: \"/\",\n\t\t\tmaxAge: oneWeek,\n\t\t});\n\n\t\treturn response;\n\t} catch (err) {\n\t\tif (err instanceof Error) {\n\t\t\tconsole.error(err);\n\t\t}\n\t}\n\n\treturn NextResponse.json(\n\t\t{ error: \"Internal Server Error.\" },\n\t\t{ status: 500 },\n\t);\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,UAAU,EAAE;IAC5B,MAAM,IAAI,MAAM;AACjB;AACA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAElC,eAAe,KAAK,OAAoB;IAC9C,IAAI;QACH,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,SAAS,iJAAA,CAAA,cAAW,CAAC,SAAS,CAAC;QAErC,IAAI,CAAC,OAAO,OAAO,EAAE;YACpB,QAAQ,GAAG,CAAC,OAAO,KAAK;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;gBAAE,OAAO,OAAO,KAAK,CAAC,OAAO;YAAG,GAChC;gBAAE,QAAQ;YAAI;QAEhB;QAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,OAAO,IAAI;QACvC,MAAM,OAAO,MAAM,wHAAA,CAAA,KAAE,CACnB,MAAM,GACN,IAAI,CAAC,8HAAA,CAAA,QAAK,EACV,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,8HAAA,CAAA,QAAK,CAAC,KAAK,EAAE,QACtB,KAAK,CAAC,GACN,IAAI,CAAC,CAAC,MAAQ,GAAG,CAAC,EAAE;QAEtB,IAAI,CAAC,MAAM;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;gBAAE,OAAO;gBAA2C,SAAS;YAAM,GACnE;gBAAE,QAAQ;YAAI;QAEhB;QAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,YAAY;QAExE,IAAI,CAAC,iBAAiB;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAEhB;QAEA,MAAM,UAAU,KAAK,KAAK,KAAK;QAE/B,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACrB;YACC,KAAK,KAAK,EAAE,CAAC,OAAO;YACpB,MAAM,8HAAA,CAAA,YAAS;YACf,OAAO,KAAK,KAAK,CAAC,OAAO;QAC1B,GACA,YACA;YACC,WAAW;QACZ;QAGD,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CACjC;YAAE,SAAS;YAAoB,SAAS;QAAK,GAC7C;YAAE,QAAQ;QAAI;QAEf,SAAS,OAAO,CAAC,GAAG,CAAC;YACpB,MAAM;YACN,OAAO;YACP,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,MAAM;YACN,QAAQ;QACT;QAEA,OAAO;IACR,EAAE,OAAO,KAAK;QACb,IAAI,eAAe,OAAO;YACzB,QAAQ,KAAK,CAAC;QACf;IACD;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;QAAE,OAAO;IAAyB,GAClC;QAAE,QAAQ;IAAI;AAEhB","debugId":null}}]
}