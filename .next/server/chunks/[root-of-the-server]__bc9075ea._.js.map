{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/connectDB.ts"],"sourcesContent":["import \"dotenv/config\";\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport postgres from \"postgres\";\nimport { Pool } from \"pg\";\n\nconst connectionString = process.env.DATABASE_URL;\n\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\n\nconst pool = new Pool({\n  connectionString,\n});\n\nexport const client = postgres(connectionString, { prepare: false });\nexport const db = drizzle({ client: pool });\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;;;;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AAEjD,IAAI,CAAC,kBAAkB;IACrB,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB;AACF;AAEO,MAAM,SAAS,CAAA,GAAA,0IAAA,CAAA,UAAQ,AAAD,EAAE,kBAAkB;IAAE,SAAS;AAAM;AAC3D,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE;IAAE,QAAQ;AAAK","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/users.ts"],"sourcesContent":["import { InferSelectModel, InferInsertModel } from \"drizzle-orm\";\nimport { pgTable, text, timestamp, boolean, uuid } from \"drizzle-orm/pg-core\";\n\nimport \"dotenv/config\";\n\nexport const users = pgTable(\"users\", {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n\n    username: text(\"username\").notNull().unique(),\n    email: text(\"email\").notNull().unique(),\n    passwordHash: text(\"password_hash\").notNull(),\n\n    createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n    updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n\n    resetPasswordToken: text(\"reset_password_token\").default(\"\"),\n    resetPasswordTokenExpires: timestamp(\"reset_password_token_expires_in\", {\n        withTimezone: true,\n    }).defaultNow(),\n\n    emailVerified: timestamp(\"email_verified_at\", { withTimezone: true }),\n\n    verificationToken: text(\"verification_token\"),\n    verificationTokenExpires: timestamp(\"verification_token_expires\", {\n        withTimezone: true,\n    }).defaultNow(),\n\n    role: text(\"role\").notNull().default(\"user\"),\n    isBanned: boolean(\"is_banned\").notNull().default(false),\n});\n\nexport type User_Select = InferSelectModel<typeof users>;\nexport type User_Insert = InferInsertModel<typeof users>;\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;AAEO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IAClC,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IAEzC,UAAU,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,YAAY,OAAO,GAAG,MAAM;IAC3C,OAAO,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,SAAS,OAAO,GAAG,MAAM;IACrC,cAAc,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,iBAAiB,OAAO;IAE3C,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GAAG,UAAU;IACrE,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GAAG,UAAU;IAErE,oBAAoB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,wBAAwB,OAAO,CAAC;IACzD,2BAA2B,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,mCAAmC;QACpE,cAAc;IAClB,GAAG,UAAU;IAEb,eAAe,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,qBAAqB;QAAE,cAAc;IAAK;IAEnE,mBAAmB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACxB,0BAA0B,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,8BAA8B;QAC9D,cAAc;IAClB,GAAG,UAAU;IAEb,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO,GAAG,OAAO,CAAC;IACrC,UAAU,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,aAAa,OAAO,GAAG,OAAO,CAAC;AACrD","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/banks.ts"],"sourcesContent":["import { InferSelectModel, InferInsertModel } from \"drizzle-orm\";\nimport { pgTable, text, uuid, PgColumn } from \"drizzle-orm/pg-core\";\n\nimport \"dotenv/config\";\nimport { users } from \"@db/schema/users\";\n\nexport const banks = pgTable(\"banks\", {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    userId: uuid(\"user_id\")\n        .references(\n            (): PgColumn => {\n                return users.id;\n            },\n            { onDelete: \"cascade\", onUpdate: \"cascade\" },\n        )\n        .notNull(),\n    bankName: text(\"bank_name\").notNull(),\n    slug: text(\"slug\").notNull().unique(),\n});\n\nexport type Bank_Select = InferSelectModel<typeof banks>;\nexport type Bank_Insert = InferInsertModel<typeof banks>;\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAEA;AACA;;;;AAEO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IAClC,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,WACR,UAAU,CACP;QACI,OAAO,8HAAA,CAAA,QAAK,CAAC,EAAE;IACnB,GACA;QAAE,UAAU;QAAW,UAAU;IAAU,GAE9C,OAAO;IACZ,UAAU,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,aAAa,OAAO;IACnC,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO,GAAG,MAAM;AACvC","debugId":null}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/branches.ts"],"sourcesContent":["import { InferSelectModel, InferInsertModel } from \"drizzle-orm\";\nimport { pgTable, text, uuid, PgColumn } from \"drizzle-orm/pg-core\";\n\nimport \"dotenv/config\";\nimport { banks } from \"@db/schema/banks\";\n\nexport const branches = pgTable(\"branches\", {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    bankId: uuid(\"bank_id\")\n        .references(\n            (): PgColumn => {\n                return banks.id;\n            },\n            { onDelete: \"cascade\", onUpdate: \"cascade\" },\n        )\n        .notNull(),\n    branchName: text(\"branch_name\").notNull(),\n    slug: text(\"slug\").notNull().unique(),\n});\n\nexport type Branch_Select = InferSelectModel<typeof branches>;\nexport type Branch_Insert = InferInsertModel<typeof branches>;\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAEA;AACA;;;;AAEO,MAAM,WAAW,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,YAAY;IACxC,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,WACR,UAAU,CACP;QACI,OAAO,8HAAA,CAAA,QAAK,CAAC,EAAE;IACnB,GACA;QAAE,UAAU;QAAW,UAAU;IAAU,GAE9C,OAAO;IACZ,YAAY,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,eAAe,OAAO;IACvC,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO,GAAG,MAAM;AACvC","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/accounts.ts"],"sourcesContent":["import { InferSelectModel, InferInsertModel } from \"drizzle-orm\";\nimport {\n\tpgTable,\n\ttext,\n\tdate,\n\tnumeric,\n\tuuid,\n\tPgColumn,\n} from \"drizzle-orm/pg-core\";\n\nimport \"dotenv/config\";\n\nimport { branches } from \"@db/schema/branches\";\nimport { users } from \"@db/schema/users\";\n\nexport const accounts = pgTable(\"accounts\", {\n\tid: uuid(\"id\").primaryKey().defaultRandom(),\n\tuserid: uuid(\"user_id\")\n\t\t.notNull()\n\t\t.references(() => users.id, { onDelete: \"cascade\", onUpdate: \"cascade\" }),\n\taccountNo: text(\"account_number\").notNull(),\n\taccountType: text(\"account_type\"),\n\tcurrency: text(\"currency\").notNull().default(\"INR\"),\n\tcreatedAtBranch: uuid(\"created_at_branch_id\")\n\t\t.references(\n\t\t\t(): PgColumn => {\n\t\t\t\treturn branches.id;\n\t\t\t},\n\t\t\t{ onDelete: \"cascade\", onUpdate: \"cascade\" },\n\t\t)\n\t\t.notNull(),\n\tnameOfBorrower: text(\"name_of_borrower\").notNull(),\n\tdateOfSanction: date(\"date_of_sanction\", { mode: \"date\" }),\n\tsanctionedAmount: numeric(\"sanctioned_amount\").notNull(),\n\toutstandingBalance: numeric(\"outstanding_balance\").notNull(),\n\totherFacilities: text(\"other_facilities\"),\n\tslug: text(\"slug\").notNull().unique(),\n});\n\nexport type Account_Select = InferSelectModel<typeof branches>;\nexport type Account_Insert = InferInsertModel<typeof branches>;\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AACA;;;;;AAEO,MAAM,WAAW,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,YAAY;IAC3C,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,WACX,OAAO,GACP,UAAU,CAAC,IAAM,8HAAA,CAAA,QAAK,CAAC,EAAE,EAAE;QAAE,UAAU;QAAW,UAAU;IAAU;IACxE,WAAW,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,kBAAkB,OAAO;IACzC,aAAa,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IAClB,UAAU,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,YAAY,OAAO,GAAG,OAAO,CAAC;IAC7C,iBAAiB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,wBACpB,UAAU,CACV;QACC,OAAO,iIAAA,CAAA,WAAQ,CAAC,EAAE;IACnB,GACA;QAAE,UAAU;QAAW,UAAU;IAAU,GAE3C,OAAO;IACT,gBAAgB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,oBAAoB,OAAO;IAChD,gBAAgB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,oBAAoB;QAAE,MAAM;IAAO;IACxD,kBAAkB,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,qBAAqB,OAAO;IACtD,oBAAoB,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,uBAAuB,OAAO;IAC1D,iBAAiB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACtB,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO,GAAG,MAAM;AACpC","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/app/api/user/route.ts"],"sourcesContent":["// app/api/user/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { db } from \"@db/connectDB\";\nimport { accounts } from \"@db/schema/accounts\";\nimport { eq } from \"drizzle-orm\";\nimport jwt from \"jsonwebtoken\";\n\ninterface JwtPayload {\n\tuserId: string;\n}\n\n// ---------------- GET ----------------\nexport async function GET(req: NextRequest) {\n\tconst cookieStore = await cookies(); // âœ… await it\n\tconst token = cookieStore.get(\"auth-token\")?.value;\n\tif (!token) return notFound();\n\tconst JWT_SECRET = process.env.JWT_SECRET;\n\tif (!JWT_SECRET) throw new Error(\"No JWT SECRET provided\");\n\n\ttry {\n\t\tconst decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\n\n\t\t// Fetch all accounts for this user\n\t\tconst userAccounts = await db\n\t\t\t.select()\n\t\t\t.from(accounts)\n\t\t\t.where(eq(accounts.userid, decoded.userId));\n\n\t\treturn NextResponse.json({\n\t\t\tuserId: decoded.userId,\n\t\t\taccounts: userAccounts,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(\"JWT verification failed:\", err);\n\t\treturn NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n\t}\n}\n\n// ---------------- POST ----------------\nexport async function POST(req: NextRequest) {\n\ttry {\n\t\tconst token = req.cookies.get(\"auth-token\")?.value;\n\t\tif (!token)\n\t\t\treturn NextResponse.json({ error: \"No token provided\" }, { status: 401 });\n\n\t\tconst JWT_SECRET = process.env.JWT_SECRET;\n\t\tif (!JWT_SECRET) throw new Error(\"No JWT SECRET provided\");\n\n\t\tconst decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\n\n\t\tconst body = await req.json();\n\t\tif (!body.name || !body.type) {\n\t\t\treturn NextResponse.json(\n\t\t\t\t{ error: \"Missing required fields\" },\n\t\t\t\t{ status: 400 },\n\t\t\t);\n\t\t}\n\n\t\tconst newAccount = await db\n\t\t\t.insert(accounts)\n\t\t\t.values({\n\t\t\t\t...body,\n\t\t\t\tuserId: decoded.userId, // associate account with the logged-in user\n\t\t\t})\n\t\t\t.returning();\n\n\t\treturn NextResponse.json(newAccount[0], { status: 201 });\n\t} catch (err) {\n\t\tconsole.error(\"Failed to create account:\", err);\n\t\treturn NextResponse.json(\n\t\t\t{ error: \"Failed to create account\" },\n\t\t\t{ status: 500 },\n\t\t);\n\t}\n}\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;AACxB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAOO,eAAe,IAAI,GAAgB;IACzC,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,KAAK,aAAa;IAClD,MAAM,QAAQ,YAAY,GAAG,CAAC,eAAe;IAC7C,IAAI,CAAC,OAAO,OAAO;IACnB,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;IACzC,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM;IAEjC,IAAI;QACH,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAElC,mCAAmC;QACnC,MAAM,eAAe,MAAM,wHAAA,CAAA,KAAE,CAC3B,MAAM,GACN,IAAI,CAAC,iIAAA,CAAA,WAAQ,EACb,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,iIAAA,CAAA,WAAQ,CAAC,MAAM,EAAE,QAAQ,MAAM;QAE1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,QAAQ,QAAQ,MAAM;YACtB,UAAU;QACX;IACD,EAAE,OAAO,KAAK;QACb,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACpE;AACD;AAGO,eAAe,KAAK,GAAgB;IAC1C,IAAI;QACH,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe;QAC7C,IAAI,CAAC,OACJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;QAExE,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;QACzC,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM;QAEjC,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAElC,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAEhB;QAEA,MAAM,aAAa,MAAM,wHAAA,CAAA,KAAE,CACzB,MAAM,CAAC,iIAAA,CAAA,WAAQ,EACf,MAAM,CAAC;YACP,GAAG,IAAI;YACP,QAAQ,QAAQ,MAAM;QACvB,GACC,SAAS;QAEX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE;YAAE,QAAQ;QAAI;IACvD,EAAE,OAAO,KAAK;QACb,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAEhB;AACD","debugId":null}}]
}