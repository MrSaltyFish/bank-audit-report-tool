{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/connectDB.ts"],"sourcesContent":["import \"dotenv/config\";\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport postgres from \"postgres\";\nimport { Pool } from \"pg\";\n\nconst connectionString = process.env.DATABASE_URL;\n\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\n\nconst pool = new Pool({\n  connectionString,\n});\n\nexport const client = postgres(connectionString, { prepare: false });\nexport const db = drizzle({ client: pool });\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;;;;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AAEjD,IAAI,CAAC,kBAAkB;IACrB,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB;AACF;AAEO,MAAM,SAAS,CAAA,GAAA,0IAAA,CAAA,UAAQ,AAAD,EAAE,kBAAkB;IAAE,SAAS;AAAM;AAC3D,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE;IAAE,QAAQ;AAAK","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/users.ts"],"sourcesContent":["import {\n    pgTable,\n    text,\n    timestamp,\n    boolean,\n    uuid,\n    integer,\n    pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { InferSelectModel, InferInsertModel } from \"drizzle-orm\";\n\n// ------------------ Enums ------------------\nexport const userStatusEnum = pgEnum(\"user_status\", [\n    \"active\",\n    \"banned\",\n    \"suspended\",\n    \"deleted\",\n]);\n\n// ------------------ Users Table ------------------\nexport const users = pgTable(\"users\", {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n\n    username: text(\"username\").notNull().unique(),\n    email: text(\"email\").notNull().unique(),\n    passwordHash: text(\"password_hash\").notNull(),\n\n    createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n    updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n\n    // Email verification\n    emailVerified: timestamp(\"email_verified_at\", { withTimezone: true }),\n    isEmailVerified: boolean(\"is_email_verified\").notNull().default(false),\n\n    // Password reset\n    resetPasswordToken: text(\"reset_password_token\"), // nullable instead of \"\"\n    resetPasswordTokenExpires: timestamp(\"reset_password_token_expires\", {\n        withTimezone: true,\n    }),\n\n    // Account verification\n    verificationToken: text(\"verification_token\"),\n    verificationTokenExpires: timestamp(\"verification_token_expires\", {\n        withTimezone: true,\n    }),\n\n    // Security & audit\n    lastLoginAt: timestamp(\"last_login_at\", { withTimezone: true }),\n    failedLoginAttempts: integer(\"failed_login_attempts\").notNull().default(0),\n    passwordChangedAt: timestamp(\"password_changed_at\", { withTimezone: true }),\n\n    status: userStatusEnum(\"status\").notNull().default(\"active\"),\n});\n\nexport type User_Select = InferSelectModel<typeof users>;\nexport type User_Insert = InferInsertModel<typeof users>;\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYO,MAAM,iBAAiB,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,eAAe;IAChD;IACA;IACA;IACA;CACH;AAGM,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IAClC,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IAEzC,UAAU,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,YAAY,OAAO,GAAG,MAAM;IAC3C,OAAO,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,SAAS,OAAO,GAAG,MAAM;IACrC,cAAc,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,iBAAiB,OAAO;IAE3C,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GAAG,UAAU;IACrE,WAAW,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;IAAK,GAAG,UAAU;IAErE,qBAAqB;IACrB,eAAe,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,qBAAqB;QAAE,cAAc;IAAK;IACnE,iBAAiB,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,qBAAqB,OAAO,GAAG,OAAO,CAAC;IAEhE,iBAAiB;IACjB,oBAAoB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACzB,2BAA2B,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,gCAAgC;QACjE,cAAc;IAClB;IAEA,uBAAuB;IACvB,mBAAmB,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE;IACxB,0BAA0B,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,8BAA8B;QAC9D,cAAc;IAClB;IAEA,mBAAmB;IACnB,aAAa,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,iBAAiB;QAAE,cAAc;IAAK;IAC7D,qBAAqB,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE,yBAAyB,OAAO,GAAG,OAAO,CAAC;IACxE,mBAAmB,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,uBAAuB;QAAE,cAAc;IAAK;IAEzE,QAAQ,eAAe,UAAU,OAAO,GAAG,OAAO,CAAC;AACvD","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/db/schema/banks.ts"],"sourcesContent":["import { InferSelectModel, InferInsertModel } from \"drizzle-orm\";\nimport { pgTable, text, uuid, PgColumn } from \"drizzle-orm/pg-core\";\n\nimport \"dotenv/config\";\nimport { users } from \"@db/schema/users\";\n\nexport const banks = pgTable(\"banks\", {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    userId: uuid(\"user_id\")\n        .references(\n            (): PgColumn => {\n                return users.id;\n            },\n            { onDelete: \"cascade\", onUpdate: \"cascade\" },\n        )\n        .notNull(),\n    bankName: text(\"bank_name\").notNull(),\n    slug: text(\"slug\").notNull().unique(),\n});\n\nexport type Bank_Select = InferSelectModel<typeof banks>;\nexport type Bank_Insert = InferInsertModel<typeof banks>;\n"],"names":[],"mappings":";;;AACA;AAAA;AAAA;AAEA;AACA;;;;AAEO,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IAClC,IAAI,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,WACR,UAAU,CACP;QACI,OAAO,8HAAA,CAAA,QAAK,CAAC,EAAE;IACnB,GACA;QAAE,UAAU;QAAW,UAAU;IAAU,GAE9C,OAAO;IACZ,UAAU,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,aAAa,OAAO;IACnC,MAAM,CAAA,GAAA,iKAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO,GAAG,MAAM;AACvC","debugId":null}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":["file:///home/fishy/Data/Development/git-self-projects/bank-audit-report-tool/src/app/api/user/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { db } from \"@db/connectDB\";\nimport { banks } from \"@db/schema/banks\";\nimport { eq } from \"drizzle-orm\";\nimport jwt from \"jsonwebtoken\";\n\ninterface JwtPayload {\n\tid: string;\n}\n\nexport async function GET(req: NextRequest) {\n\tconst token = req.cookies.get(\"auth-token\")?.value;\n\tif (!token)\n\t\treturn NextResponse.json({ error: \"No token provided\" }, { status: 401 });\n\n\tconst JWT_SECRET = process.env.JWT_SECRET;\n\tif (!JWT_SECRET) throw new Error(\"No JWT SECRET provided\");\n\n\ttry {\n\t\tconst decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\n\n\t\tconsole.log(\"Decoded JWT:\", decoded);\n\t\t// Fetch all banks for this user\n\t\tconst userbanks = await db\n\t\t\t.select()\n\t\t\t.from(banks)\n\t\t\t.where(eq(banks.userId, decoded.id));\n\n\t\tconsole.log(\"userbanks: \");\n\t\tconsole.log(userbanks);\n\n\t\tconst formattedBanks = userbanks.map((b) => ({\n\t\t\tid: b.id,\n\t\t\tuserId: b.userId, // Drizzle allows this because references return camelCase?\n\t\t\tbankName: b.bankName,\n\t\t\tslug: b.slug,\n\t\t}));\n\n\t\tconsole.log(formattedBanks);\n\n\t\treturn NextResponse.json({\n\t\t\tuserId: decoded.id,\n\t\t\tbanks: formattedBanks,\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(\"JWT verification failed:\", err);\n\t\treturn NextResponse.json({ error: \"Invalid token\" }, { status: 401 });\n\t}\n}\n\nexport async function POST(req: NextRequest) {\n\ttry {\n\t\tconst token = req.cookies.get(\"auth-token\")?.value;\n\t\tif (!token)\n\t\t\treturn NextResponse.json({ error: \"No token provided\" }, { status: 401 });\n\n\t\tconst JWT_SECRET = process.env.JWT_SECRET;\n\t\tif (!JWT_SECRET) throw new Error(\"No JWT SECRET provided\");\n\n\t\tconst decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\n\n\t\tconst body = await req.json();\n\t\tif (!body.name || !body.type) {\n\t\t\treturn NextResponse.json(\n\t\t\t\t{ error: \"Missing required fields\" },\n\t\t\t\t{ status: 400 },\n\t\t\t);\n\t\t}\n\n\t\tconst newAccount = await db\n\t\t\t.insert(banks)\n\t\t\t.values({\n\t\t\t\t...body,\n\t\t\t\tuserId: decoded.id, // associate account with the logged-in user\n\t\t\t})\n\t\t\t.returning();\n\n\t\treturn NextResponse.json(newAccount[0], { status: 201 });\n\t} catch (err) {\n\t\tconsole.error(\"Failed to create account:\", err);\n\t\treturn NextResponse.json(\n\t\t\t{ error: \"Failed to create account\" },\n\t\t\t{ status: 500 },\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAMO,eAAe,IAAI,GAAgB;IACzC,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe;IAC7C,IAAI,CAAC,OACJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAoB,GAAG;QAAE,QAAQ;IAAI;IAExE,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;IACzC,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM;IAEjC,IAAI;QACH,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAElC,QAAQ,GAAG,CAAC,gBAAgB;QAC5B,gCAAgC;QAChC,MAAM,YAAY,MAAM,wHAAA,CAAA,KAAE,CACxB,MAAM,GACN,IAAI,CAAC,8HAAA,CAAA,QAAK,EACV,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,8HAAA,CAAA,QAAK,CAAC,MAAM,EAAE,QAAQ,EAAE;QAEnC,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC;QAEZ,MAAM,iBAAiB,UAAU,GAAG,CAAC,CAAC,IAAM,CAAC;gBAC5C,IAAI,EAAE,EAAE;gBACR,QAAQ,EAAE,MAAM;gBAChB,UAAU,EAAE,QAAQ;gBACpB,MAAM,EAAE,IAAI;YACb,CAAC;QAED,QAAQ,GAAG,CAAC;QAEZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,QAAQ,QAAQ,EAAE;YAClB,OAAO;QACR;IACD,EAAE,OAAO,KAAK;QACb,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACpE;AACD;AAEO,eAAe,KAAK,GAAgB;IAC1C,IAAI;QACH,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe;QAC7C,IAAI,CAAC,OACJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;QAExE,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;QACzC,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM;QAEjC,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAElC,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAEhB;QAEA,MAAM,aAAa,MAAM,wHAAA,CAAA,KAAE,CACzB,MAAM,CAAC,8HAAA,CAAA,QAAK,EACZ,MAAM,CAAC;YACP,GAAG,IAAI;YACP,QAAQ,QAAQ,EAAE;QACnB,GACC,SAAS;QAEX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE;YAAE,QAAQ;QAAI;IACvD,EAAE,OAAO,KAAK;QACb,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAEhB;AACD","debugId":null}}]
}